// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: netVlad.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "netVlad.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace netVlad {
class NetRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetRequest> {
} _NetRequest_default_instance_;
class NetResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetResponse> {
} _NetResponse_default_instance_;

namespace protobuf_netVlad_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetRequest, nettype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetRequest, img_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetResponse, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetResponse, vec_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(NetRequest)},
  { 7, -1, sizeof(NetResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_NetResponse_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "netVlad.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _NetRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _NetResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _NetRequest_default_instance_.DefaultConstruct();
  _NetResponse_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\rnetVlad.proto\022\007netVlad\"*\n\nNetRequest\022\017"
      "\n\007netType\030\001 \001(\t\022\013\n\003img\030\002 \001(\014\"(\n\013NetRespo"
      "nse\022\014\n\004flag\030\001 \001(\t\022\013\n\003vec\030\002 \003(\0022D\n\nNetCon"
      "nect\0226\n\007img2vec\022\023.netVlad.NetRequest\032\024.n"
      "etVlad.NetResponse\"\000B4\n\030io.grpc.examples"
      ".netVladB\014NetVladProtoP\001\242\002\007sendImgb\006prot"
      "o3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 242);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "netVlad.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_netVlad_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetRequest::kNetTypeFieldNumber;
const int NetRequest::kImgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetRequest::NetRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netVlad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netVlad.NetRequest)
}
NetRequest::NetRequest(const NetRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nettype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.nettype().size() > 0) {
    nettype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nettype_);
  }
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.img().size() > 0) {
    img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
  }
  // @@protoc_insertion_point(copy_constructor:netVlad.NetRequest)
}

void NetRequest::SharedCtor() {
  nettype_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetRequest::~NetRequest() {
  // @@protoc_insertion_point(destructor:netVlad.NetRequest)
  SharedDtor();
}

void NetRequest::SharedDtor() {
  nettype_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetRequest::descriptor() {
  protobuf_netVlad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netVlad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetRequest& NetRequest::default_instance() {
  protobuf_netVlad_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetRequest* NetRequest::New(::google::protobuf::Arena* arena) const {
  NetRequest* n = new NetRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:netVlad.NetRequest)
  nettype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netVlad.NetRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string netType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_nettype()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->nettype().data(), this->nettype().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netVlad.NetRequest.netType"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes img = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_img()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netVlad.NetRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netVlad.NetRequest)
  return false;
#undef DO_
}

void NetRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netVlad.NetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string netType = 1;
  if (this->nettype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nettype().data(), this->nettype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netVlad.NetRequest.netType");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->nettype(), output);
  }

  // bytes img = 2;
  if (this->img().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->img(), output);
  }

  // @@protoc_insertion_point(serialize_end:netVlad.NetRequest)
}

::google::protobuf::uint8* NetRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netVlad.NetRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string netType = 1;
  if (this->nettype().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->nettype().data(), this->nettype().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netVlad.NetRequest.netType");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->nettype(), target);
  }

  // bytes img = 2;
  if (this->img().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->img(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netVlad.NetRequest)
  return target;
}

size_t NetRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netVlad.NetRequest)
  size_t total_size = 0;

  // string netType = 1;
  if (this->nettype().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->nettype());
  }

  // bytes img = 2;
  if (this->img().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->img());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netVlad.NetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const NetRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netVlad.NetRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netVlad.NetRequest)
    MergeFrom(*source);
  }
}

void NetRequest::MergeFrom(const NetRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netVlad.NetRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.nettype().size() > 0) {

    nettype_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.nettype_);
  }
  if (from.img().size() > 0) {

    img_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.img_);
  }
}

void NetRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netVlad.NetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetRequest::CopyFrom(const NetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netVlad.NetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetRequest::IsInitialized() const {
  return true;
}

void NetRequest::Swap(NetRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetRequest::InternalSwap(NetRequest* other) {
  nettype_.Swap(&other->nettype_);
  img_.Swap(&other->img_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetRequest::GetMetadata() const {
  protobuf_netVlad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netVlad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetRequest

// string netType = 1;
void NetRequest::clear_nettype() {
  nettype_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetRequest::nettype() const {
  // @@protoc_insertion_point(field_get:netVlad.NetRequest.netType)
  return nettype_.GetNoArena();
}
void NetRequest::set_nettype(const ::std::string& value) {
  
  nettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netVlad.NetRequest.netType)
}
#if LANG_CXX11
void NetRequest::set_nettype(::std::string&& value) {
  
  nettype_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netVlad.NetRequest.netType)
}
#endif
void NetRequest::set_nettype(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  nettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netVlad.NetRequest.netType)
}
void NetRequest::set_nettype(const char* value, size_t size) {
  
  nettype_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netVlad.NetRequest.netType)
}
::std::string* NetRequest::mutable_nettype() {
  
  // @@protoc_insertion_point(field_mutable:netVlad.NetRequest.netType)
  return nettype_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetRequest::release_nettype() {
  // @@protoc_insertion_point(field_release:netVlad.NetRequest.netType)
  
  return nettype_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetRequest::set_allocated_nettype(::std::string* nettype) {
  if (nettype != NULL) {
    
  } else {
    
  }
  nettype_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), nettype);
  // @@protoc_insertion_point(field_set_allocated:netVlad.NetRequest.netType)
}

// bytes img = 2;
void NetRequest::clear_img() {
  img_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetRequest::img() const {
  // @@protoc_insertion_point(field_get:netVlad.NetRequest.img)
  return img_.GetNoArena();
}
void NetRequest::set_img(const ::std::string& value) {
  
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netVlad.NetRequest.img)
}
#if LANG_CXX11
void NetRequest::set_img(::std::string&& value) {
  
  img_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netVlad.NetRequest.img)
}
#endif
void NetRequest::set_img(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netVlad.NetRequest.img)
}
void NetRequest::set_img(const void* value, size_t size) {
  
  img_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netVlad.NetRequest.img)
}
::std::string* NetRequest::mutable_img() {
  
  // @@protoc_insertion_point(field_mutable:netVlad.NetRequest.img)
  return img_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetRequest::release_img() {
  // @@protoc_insertion_point(field_release:netVlad.NetRequest.img)
  
  return img_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetRequest::set_allocated_img(::std::string* img) {
  if (img != NULL) {
    
  } else {
    
  }
  img_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), img);
  // @@protoc_insertion_point(field_set_allocated:netVlad.NetRequest.img)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetResponse::kFlagFieldNumber;
const int NetResponse::kVecFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetResponse::NetResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_netVlad_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:netVlad.NetResponse)
}
NetResponse::NetResponse(const NetResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      vec_(from.vec_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.flag().size() > 0) {
    flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flag_);
  }
  // @@protoc_insertion_point(copy_constructor:netVlad.NetResponse)
}

void NetResponse::SharedCtor() {
  flag_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetResponse::~NetResponse() {
  // @@protoc_insertion_point(destructor:netVlad.NetResponse)
  SharedDtor();
}

void NetResponse::SharedDtor() {
  flag_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetResponse::descriptor() {
  protobuf_netVlad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netVlad_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NetResponse& NetResponse::default_instance() {
  protobuf_netVlad_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetResponse* NetResponse::New(::google::protobuf::Arena* arena) const {
  NetResponse* n = new NetResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:netVlad.NetResponse)
  vec_.Clear();
  flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:netVlad.NetResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string flag = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flag()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->flag().data(), this->flag().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "netVlad.NetResponse.flag"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float vec = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_vec())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(21u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 18u, input, this->mutable_vec())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:netVlad.NetResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:netVlad.NetResponse)
  return false;
#undef DO_
}

void NetResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:netVlad.NetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flag = 1;
  if (this->flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netVlad.NetResponse.flag");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->flag(), output);
  }

  // repeated float vec = 2;
  if (this->vec_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_vec_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->vec().data(), this->vec_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:netVlad.NetResponse)
}

::google::protobuf::uint8* NetResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:netVlad.NetResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string flag = 1;
  if (this->flag().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->flag().data(), this->flag().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "netVlad.NetResponse.flag");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->flag(), target);
  }

  // repeated float vec = 2;
  if (this->vec_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _vec_cached_byte_size_, target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->vec_, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:netVlad.NetResponse)
  return target;
}

size_t NetResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:netVlad.NetResponse)
  size_t total_size = 0;

  // repeated float vec = 2;
  {
    unsigned int count = this->vec_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _vec_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // string flag = 1;
  if (this->flag().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->flag());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:netVlad.NetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const NetResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NetResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:netVlad.NetResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:netVlad.NetResponse)
    MergeFrom(*source);
  }
}

void NetResponse::MergeFrom(const NetResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:netVlad.NetResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vec_.MergeFrom(from.vec_);
  if (from.flag().size() > 0) {

    flag_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.flag_);
  }
}

void NetResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:netVlad.NetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetResponse::CopyFrom(const NetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:netVlad.NetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetResponse::IsInitialized() const {
  return true;
}

void NetResponse::Swap(NetResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetResponse::InternalSwap(NetResponse* other) {
  vec_.InternalSwap(&other->vec_);
  flag_.Swap(&other->flag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata NetResponse::GetMetadata() const {
  protobuf_netVlad_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_netVlad_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetResponse

// string flag = 1;
void NetResponse::clear_flag() {
  flag_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetResponse::flag() const {
  // @@protoc_insertion_point(field_get:netVlad.NetResponse.flag)
  return flag_.GetNoArena();
}
void NetResponse::set_flag(const ::std::string& value) {
  
  flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:netVlad.NetResponse.flag)
}
#if LANG_CXX11
void NetResponse::set_flag(::std::string&& value) {
  
  flag_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:netVlad.NetResponse.flag)
}
#endif
void NetResponse::set_flag(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:netVlad.NetResponse.flag)
}
void NetResponse::set_flag(const char* value, size_t size) {
  
  flag_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:netVlad.NetResponse.flag)
}
::std::string* NetResponse::mutable_flag() {
  
  // @@protoc_insertion_point(field_mutable:netVlad.NetResponse.flag)
  return flag_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetResponse::release_flag() {
  // @@protoc_insertion_point(field_release:netVlad.NetResponse.flag)
  
  return flag_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetResponse::set_allocated_flag(::std::string* flag) {
  if (flag != NULL) {
    
  } else {
    
  }
  flag_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), flag);
  // @@protoc_insertion_point(field_set_allocated:netVlad.NetResponse.flag)
}

// repeated float vec = 2;
int NetResponse::vec_size() const {
  return vec_.size();
}
void NetResponse::clear_vec() {
  vec_.Clear();
}
float NetResponse::vec(int index) const {
  // @@protoc_insertion_point(field_get:netVlad.NetResponse.vec)
  return vec_.Get(index);
}
void NetResponse::set_vec(int index, float value) {
  vec_.Set(index, value);
  // @@protoc_insertion_point(field_set:netVlad.NetResponse.vec)
}
void NetResponse::add_vec(float value) {
  vec_.Add(value);
  // @@protoc_insertion_point(field_add:netVlad.NetResponse.vec)
}
const ::google::protobuf::RepeatedField< float >&
NetResponse::vec() const {
  // @@protoc_insertion_point(field_list:netVlad.NetResponse.vec)
  return vec_;
}
::google::protobuf::RepeatedField< float >*
NetResponse::mutable_vec() {
  // @@protoc_insertion_point(field_mutable_list:netVlad.NetResponse.vec)
  return &vec_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace netVlad

// @@protoc_insertion_point(global_scope)
